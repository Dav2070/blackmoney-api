generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id          BigInt       @id @default(autoincrement())
  uuid        String       @unique @default(uuid())
  userId      BigInt
  name        String       @db.VarChar
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  restaurants Restaurant[]
}

model Restaurant {
  id        BigInt     @id @default(autoincrement())
  uuid      String     @unique @default(uuid())
  name      String     @db.VarChar
  companyId BigInt
  company   Company    @relation(fields: [companyId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  users     User[]
  rooms     Room[]
  registers Register[]
}

model Register {
  id              BigInt           @id @default(autoincrement())
  uuid            String           @unique @default(uuid())
  name            String           @db.VarChar
  adminPuk        String           @db.VarChar
  restaurantId    BigInt
  restaurant      Restaurant       @relation(fields: [restaurantId], references: [id])
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
  registerClients RegisterClient[]
}

model RegisterClient {
  id           BigInt   @id @default(autoincrement())
  uuid         String   @unique @default(uuid())
  name         String   @db.VarChar
  serialNumber String   @unique @db.VarChar
  registerId   BigInt
  register     Register @relation(fields: [registerId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
}

model User {
  id           BigInt     @id @default(autoincrement())
  uuid         String     @unique @default(uuid())
  name         String     @db.VarChar
  password     String     @db.VarChar
  role         UserRole   @default(USER)
  restaurantId BigInt
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  sessions     Session[]
  orders       Order[]
}

model Session {
  id        BigInt   @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  userId    BigInt
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Room {
  id           BigInt      @id @default(autoincrement())
  uuid         String      @unique @default(uuid())
  name         String      @db.VarChar
  userId       BigInt?
  restaurantId BigInt?
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt
  tables       Table[]
}

model Table {
  id        BigInt   @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  name      Int      @default(1)
  roomId    BigInt
  room      Room     @relation(fields: [roomId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  orders    Order[]
}

model Bill {
  id        BigInt   @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  orders    Order[]
}

model Order {
  id            BigInt         @id @default(autoincrement())
  uuid          String         @unique @default(uuid())
  paidAt        DateTime?
  paymentMethod PaymentMethod?
  tableId       BigInt
  table         Table          @relation(fields: [tableId], references: [id])
  userId        BigInt?
  user          User?          @relation(fields: [userId], references: [id])
  billId        BigInt?
  bill          Bill?          @relation(fields: [billId], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  orderItems    OrderItem[]
}

model OrderItem {
  id                  BigInt               @id @default(autoincrement())
  uuid                String               @unique @default(uuid())
  count               Int                  @default(1)
  orderId             BigInt
  productId           BigInt
  order               Order                @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product             Product              @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now()) @updatedAt
  orderItemVariations OrderItemVariation[]
}

model OrderItemVariation {
  id                                 BigInt                              @id @default(autoincrement())
  uuid                               String                              @unique @default(uuid())
  count                              Int                                 @default(1)
  orderItemId                        BigInt
  orderItem                          OrderItem                           @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  createdAt                          DateTime                            @default(now())
  updatedAt                          DateTime                            @default(now()) @updatedAt
  orderItemVariationToVariationItems OrderItemVariationToVariationItem[]
}

model OrderItemVariationToVariationItem {
  id                   BigInt             @id @default(autoincrement())
  orderItemVariationId BigInt
  variationItemId      BigInt
  orderItemVariation   OrderItemVariation @relation(fields: [orderItemVariationId], references: [id], onDelete: Cascade)
  variationItem        VariationItem      @relation(fields: [variationItemId], references: [id], onDelete: Cascade)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @default(now()) @updatedAt
}

model Product {
  id                  BigInt               @id @default(autoincrement())
  uuid                String               @unique @default(uuid())
  name                String
  price               Int
  categoryId          BigInt
  category            Category             @relation(fields: [categoryId], references: [id])
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now()) @updatedAt
  productToVariations ProductToVariation[]
  orderItems          OrderItem[]
}

model ProductToVariation {
  id          BigInt    @id @default(autoincrement())
  productId   BigInt
  variationId BigInt
  product     Product   @relation(fields: [productId], references: [id])
  variation   Variation @relation(fields: [variationId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
}

model Variation {
  id                  BigInt               @id @default(autoincrement())
  uuid                String               @unique @default(uuid())
  name                String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now()) @updatedAt
  productToVariations ProductToVariation[]
  variationItems      VariationItem[]
}

model VariationItem {
  id                                 BigInt                              @id @default(autoincrement())
  uuid                               String                              @unique @default(uuid())
  name                               String
  additionalCost                     Int
  variationId                        BigInt
  variation                          Variation                           @relation(fields: [variationId], references: [id])
  createdAt                          DateTime                            @default(now())
  updatedAt                          DateTime                            @default(now()) @updatedAt
  orderItemVariationToVariationItems OrderItemVariationToVariationItem[]
}

model Category {
  id        BigInt       @id @default(autoincrement())
  uuid      String       @unique @default(uuid())
  name      String
  type      CategoryType @default(FOOD)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now()) @updatedAt
  products  Product[]
}

enum UserRole {
  ADMIN
  USER
}

enum CategoryType {
  DRINK
  FOOD
}

enum PaymentMethod {
  CASH
  CARD
}
